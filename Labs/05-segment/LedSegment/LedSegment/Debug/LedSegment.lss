
LedSegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d1d  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fd  00000000  00000000  00001061  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b8  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048a  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000335  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000025db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register - NULOVANIE/NULL
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_low+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_low+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_write_high>:
 * Function: GPIO_write_high()
 **********************************************************************/

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_write_high+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_write_high+0xa>
  c4:	24 2b       	or	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  ca:	0e 94 76 00 	call	0xec	; 0xec <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0b00001101, 0b00010000);
  ce:	60 e1       	ldi	r22, 0x10	; 16
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	0e 94 86 00 	call	0x10c	; 0x10c <SEG_update_shift_regs>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0xc>

000000d8 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
    // WRITE YOUR CODE HERE

  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	8a e2       	ldi	r24, 0x2A	; 42
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
  f6:	67 e0       	ldi	r22, 0x07	; 7
  f8:	8a e2       	ldi	r24, 0x2A	; 42
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
 10a:	08 95       	ret

0000010c <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	c8 2f       	mov	r28, r24
    uint8_t bit_number;

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 112:	64 e0       	ldi	r22, 0x04	; 4
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 11c:	67 e0       	ldi	r22, 0x07	; 7
 11e:	8b e2       	ldi	r24, 0x2B	; 43
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_DATA);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	8b e2       	ldi	r24, 0x2B	; 43
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <SEG_update_shift_regs+0x26>
 136:	00 00       	nop
 138:	d8 e0       	ldi	r29, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 1) == 1)
 13a:	c0 ff       	sbrs	r28, 0
 13c:	06 c0       	rjmp	.+12     	; 0x14a <SEG_update_shift_regs+0x3e>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	85 e2       	ldi	r24, 0x25	; 37
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 148:	05 c0       	rjmp	.+10     	; 0x154 <SEG_update_shift_regs+0x48>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	85 e2       	ldi	r24, 0x25	; 37
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <SEG_update_shift_regs+0x4a>
 15a:	00 00       	nop
        }
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 15c:	67 e0       	ldi	r22, 0x07	; 7
 15e:	8b e2       	ldi	r24, 0x2B	; 43
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <SEG_update_shift_regs+0x5c>
 16c:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 16e:	67 e0       	ldi	r22, 0x07	; 7
 170:	8b e2       	ldi	r24, 0x2B	; 43
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 178:	c6 95       	lsr	r28
 17a:	d1 50       	subi	r29, 0x01	; 1
    GPIO_write_low(&PORTD, SEG_DATA);
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 17c:	f1 f6       	brne	.-68     	; 0x13a <SEG_update_shift_regs+0x2e>
 17e:	d8 e0       	ldi	r29, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 1) == 1)
 180:	c1 70       	andi	r28, 0x01	; 1
 182:	cc 23       	and	r28, r28
 184:	31 f0       	breq	.+12     	; 0x192 <SEG_update_shift_regs+0x86>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 190:	05 c0       	rjmp	.+10     	; 0x19c <SEG_update_shift_regs+0x90>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <SEG_update_shift_regs+0x92>
 1a2:	00 00       	nop
        }            
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 1a4:	67 e0       	ldi	r22, 0x07	; 7
 1a6:	8b e2       	ldi	r24, 0x2B	; 43
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 1ae:	85 e0       	ldi	r24, 0x05	; 5
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <SEG_update_shift_regs+0xa4>
 1b4:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 1b6:	67 e0       	ldi	r22, 0x07	; 7
 1b8:	8b e2       	ldi	r24, 0x2B	; 43
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
 1c0:	d1 50       	subi	r29, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1c2:	f9 f6       	brne	.-66     	; 0x182 <SEG_update_shift_regs+0x76>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	8b e2       	ldi	r24, 0x2B	; 43
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <SEG_update_shift_regs+0xc4>
 1d4:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
