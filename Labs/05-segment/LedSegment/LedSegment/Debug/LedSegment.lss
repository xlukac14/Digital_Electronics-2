
LedSegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001fe  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d68  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000820  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bf  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a9  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000352  00000000  00000000  00002381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000026d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register - NULOVANIE/NULL
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
 * Function: GPIO_write_high()
 **********************************************************************/

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 81 00 	call	0x102	; 0x102 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0b00001101, 0b00010000);
  e4:	60 e1       	ldi	r22, 0x10	; 16
  e6:	8d e0       	ldi	r24, 0x0D	; 13
  e8:	0e 94 91 00 	call	0x122	; 0x122 <SEG_update_shift_regs>
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0xc>

000000ee <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
    // WRITE YOUR CODE HERE

  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <SEG_init>:
};

void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	8a e2       	ldi	r24, 0x2A	; 42
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 10c:	67 e0       	ldi	r22, 0x07	; 7
 10e:	8a e2       	ldi	r24, 0x2A	; 42
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 120:	08 95       	ret

00000122 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9 
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e0 50       	subi	r30, 0x00	; 0
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	c0 81       	ld	r28, Z
    position = segment_position[position];  //0, 1, 2, 3
    
    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 130:	64 e0       	ldi	r22, 0x04	; 4
 132:	8b e2       	ldi	r24, 0x2B	; 43
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 13a:	67 e0       	ldi	r22, 0x07	; 7
 13c:	8b e2       	ldi	r24, 0x2B	; 43
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_DATA);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	8b e2       	ldi	r24, 0x2B	; 43
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	8a 95       	dec	r24
 152:	f1 f7       	brne	.-4      	; 0x150 <SEG_update_shift_regs+0x2e>
 154:	00 00       	nop
 156:	d8 e0       	ldi	r29, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 1) == 1)
 158:	c0 ff       	sbrs	r28, 0
 15a:	06 c0       	rjmp	.+12     	; 0x168 <SEG_update_shift_regs+0x46>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	85 e2       	ldi	r24, 0x25	; 37
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 166:	05 c0       	rjmp	.+10     	; 0x172 <SEG_update_shift_regs+0x50>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	85 e2       	ldi	r24, 0x25	; 37
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <SEG_update_shift_regs+0x52>
 178:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 17a:	67 e0       	ldi	r22, 0x07	; 7
 17c:	8b e2       	ldi	r24, 0x2B	; 43
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <SEG_update_shift_regs+0x64>
 18a:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 18c:	67 e0       	ldi	r22, 0x07	; 7
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        
        // Shift "segments"
        segments = segments >> 1;
 196:	c6 95       	lsr	r28
 198:	d1 50       	subi	r29, 0x01	; 1
    // Wait 1 us
    _delay_us(1);
    
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 19a:	f1 f6       	brne	.-68     	; 0x158 <SEG_update_shift_regs+0x36>
 19c:	d8 e0       	ldi	r29, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 1) == 1)
 19e:	c1 70       	andi	r28, 0x01	; 1
 1a0:	cc 23       	and	r28, r28
 1a2:	31 f0       	breq	.+12     	; 0x1b0 <SEG_update_shift_regs+0x8e>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <SEG_update_shift_regs+0x98>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	85 e2       	ldi	r24, 0x25	; 37
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <SEG_update_shift_regs+0x9a>
 1c0:	00 00       	nop
             
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 1c2:	67 e0       	ldi	r22, 0x07	; 7
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <SEG_update_shift_regs+0xac>
 1d2:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 1d4:	67 e0       	ldi	r22, 0x07	; 7
 1d6:	8b e2       	ldi	r24, 0x2B	; 43
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1de:	d1 50       	subi	r29, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1e0:	f9 f6       	brne	.-66     	; 0x1a0 <SEG_update_shift_regs+0x7e>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 1e2:	64 e0       	ldi	r22, 0x04	; 4
 1e4:	8b e2       	ldi	r24, 0x2B	; 43
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1ec:	85 e0       	ldi	r24, 0x05	; 5
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <SEG_update_shift_regs+0xcc>
 1f2:	00 00       	nop
    
    // Wait 1 us
    _delay_us(1);
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
