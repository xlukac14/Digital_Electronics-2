
08-i2c_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800122  00800122  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf4  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000659  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000021f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fd  00000000  00000000  00002903  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_18>
  4c:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 36       	cpi	r26, 0x67	; 103
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 63 01 	call	0x2c6	; 0x2c6 <uart_init>
    
    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 91 01 	call	0x322	; 0x322 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <__vector_13+0x28>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	c1 f0       	breq	.+48     	; 0x144 <__vector_13+0x6c>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	09 f1       	breq	.+66     	; 0x15a <__vector_13+0x82>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	a1 f5       	brne	.+104    	; 0x184 <__vector_13+0xac>
    {
    // Increment I2C slave address
    
    case STATE_IDLE:
        addr++;
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	98 0f       	add	r25, r24
 124:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        // If slave address is between 8 and 119 then move to SEND state
        if (addr >= 8 && addr <= 119)
 128:	87 50       	subi	r24, 0x07	; 7
 12a:	80 37       	cpi	r24, 0x70	; 112
 12c:	20 f4       	brcc	.+8      	; 0x136 <__vector_13+0x5e>
        {
            state = STATE_SEND;
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 134:	2a c0       	rjmp	.+84     	; 0x18a <__vector_13+0xb2>
        }
        else
        {
            addr = 7;
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            state = STATE_SEND;
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 142:	23 c0       	rjmp	.+70     	; 0x18a <__vector_13+0xb2>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 148:	88 0f       	add	r24, r24
 14a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <twi_start>
        twi_stop();
 14e:	0e 94 07 01 	call	0x20e	; 0x20e <twi_stop>
        {
            state = STATE_ACK;
        } 
        else
        {
            state = STATE_IDLE;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 158:	18 c0       	rjmp	.+48     	; 0x18a <__vector_13+0xb2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15e:	40 e1       	ldi	r20, 0x10	; 16
 160:	be 01       	movw	r22, r28
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 a0 01 	call	0x340	; 0x340 <__itoa_ncheck>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        itoa(addr, uart_string, 16);
        uart_puts(uart_string);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 91 01 	call	0x322	; 0x322 <uart_puts>
        uart_puts(" ");
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 91 01 	call	0x322	; 0x322 <uart_puts>
        state = STATE_IDLE;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 182:	03 c0       	rjmp	.+6      	; 0x18a <__vector_13+0xb2>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
        
    }
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1b4:	87 b1       	in	r24, 0x07	; 7
 1b6:	8f 7c       	andi	r24, 0xCF	; 207
 1b8:	87 b9       	out	0x07, r24	; 7
 1ba:	88 b1       	in	r24, 0x08	; 8
 1bc:	80 63       	ori	r24, 0x30	; 48
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	e9 eb       	ldi	r30, 0xB9	; 185
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8c 7f       	andi	r24, 0xFC	; 252
 1c8:	80 83       	st	Z, r24
 1ca:	88 e9       	ldi	r24, 0x98	; 152
 1cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1d0:	08 95       	ret

000001d2 <twi_start>:
 1d2:	94 ea       	ldi	r25, 0xA4	; 164
 1d4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1d8:	ec eb       	ldi	r30, 0xBC	; 188
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	90 81       	ld	r25, Z
 1de:	99 23       	and	r25, r25
 1e0:	ec f7       	brge	.-6      	; 0x1dc <twi_start+0xa>
 1e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1e6:	84 e8       	ldi	r24, 0x84	; 132
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1ec:	ec eb       	ldi	r30, 0xBC	; 188
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	88 23       	and	r24, r24
 1f4:	ec f7       	brge	.-6      	; 0x1f0 <twi_start+0x1e>
 1f6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1fa:	98 7f       	andi	r25, 0xF8	; 248
 1fc:	98 31       	cpi	r25, 0x18	; 24
 1fe:	29 f0       	breq	.+10     	; 0x20a <twi_start+0x38>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 34       	cpi	r25, 0x40	; 64
 204:	19 f4       	brne	.+6      	; 0x20c <twi_start+0x3a>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret

0000020e <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 20e:	84 e9       	ldi	r24, 0x94	; 148
 210:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 214:	08 95       	ret

00000216 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
 22a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 22e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 232:	8c 71       	andi	r24, 0x1C	; 28
 234:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <UART_RxHead>
 238:	ef 5f       	subi	r30, 0xFF	; 255
 23a:	ef 71       	andi	r30, 0x1F	; 31
 23c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_RxTail>
 240:	e9 17       	cp	r30, r25
 242:	39 f0       	breq	.+14     	; 0x252 <__vector_18+0x3c>
 244:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <UART_RxHead>
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	e9 5d       	subi	r30, 0xD9	; 217
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	20 83       	st	Z, r18
 250:	01 c0       	rjmp	.+2      	; 0x254 <__vector_18+0x3e>
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 258:	89 2b       	or	r24, r25
 25a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_19>:
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
 284:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_TxHead>
 288:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <UART_TxTail>
 28c:	98 17       	cp	r25, r24
 28e:	69 f0       	breq	.+26     	; 0x2aa <__vector_19+0x38>
 290:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <UART_TxTail>
 294:	ef 5f       	subi	r30, 0xFF	; 255
 296:	ef 71       	andi	r30, 0x1F	; 31
 298:	e0 93 25 01 	sts	0x0125, r30	; 0x800125 <UART_TxTail>
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e9 5b       	subi	r30, 0xB9	; 185
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	80 81       	ld	r24, Z
 2a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <__vector_19+0x42>
 2aa:	e1 ec       	ldi	r30, 0xC1	; 193
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	80 83       	st	Z, r24
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <uart_init>:
 2c6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_TxHead>
 2ca:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_TxTail>
 2ce:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_RxHead>
 2d2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_RxTail>
 2d6:	99 23       	and	r25, r25
 2d8:	1c f4       	brge	.+6      	; 0x2e0 <uart_init+0x1a>
 2da:	22 e0       	ldi	r18, 0x02	; 2
 2dc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2e0:	90 78       	andi	r25, 0x80	; 128
 2e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 2e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 2ea:	88 e9       	ldi	r24, 0x98	; 152
 2ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 2f6:	08 95       	ret

000002f8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2f8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <UART_TxHead>
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 300:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_TxTail>
 304:	29 17       	cp	r18, r25
 306:	e1 f3       	breq	.-8      	; 0x300 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 308:	e2 2f       	mov	r30, r18
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	e9 5b       	subi	r30, 0xB9	; 185
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 312:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 316:	e1 ec       	ldi	r30, 0xC1	; 193
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	80 62       	ori	r24, 0x20	; 32
 31e:	80 83       	st	Z, r24
 320:	08 95       	ret

00000322 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ec 01       	movw	r28, r24
    while (*s)
 328:	88 81       	ld	r24, Y
 32a:	88 23       	and	r24, r24
 32c:	31 f0       	breq	.+12     	; 0x33a <uart_puts+0x18>
 32e:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 330:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 334:	89 91       	ld	r24, Y+
 336:	81 11       	cpse	r24, r1
 338:	fb cf       	rjmp	.-10     	; 0x330 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <__itoa_ncheck>:
 340:	bb 27       	eor	r27, r27
 342:	4a 30       	cpi	r20, 0x0A	; 10
 344:	31 f4       	brne	.+12     	; 0x352 <__itoa_ncheck+0x12>
 346:	99 23       	and	r25, r25
 348:	22 f4       	brpl	.+8      	; 0x352 <__itoa_ncheck+0x12>
 34a:	bd e2       	ldi	r27, 0x2D	; 45
 34c:	90 95       	com	r25
 34e:	81 95       	neg	r24
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	0c 94 ac 01 	jmp	0x358	; 0x358 <__utoa_common>

00000356 <__utoa_ncheck>:
 356:	bb 27       	eor	r27, r27

00000358 <__utoa_common>:
 358:	fb 01       	movw	r30, r22
 35a:	55 27       	eor	r21, r21
 35c:	aa 27       	eor	r26, r26
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	aa 1f       	adc	r26, r26
 364:	a4 17       	cp	r26, r20
 366:	10 f0       	brcs	.+4      	; 0x36c <__utoa_common+0x14>
 368:	a4 1b       	sub	r26, r20
 36a:	83 95       	inc	r24
 36c:	50 51       	subi	r21, 0x10	; 16
 36e:	b9 f7       	brne	.-18     	; 0x35e <__utoa_common+0x6>
 370:	a0 5d       	subi	r26, 0xD0	; 208
 372:	aa 33       	cpi	r26, 0x3A	; 58
 374:	08 f0       	brcs	.+2      	; 0x378 <__utoa_common+0x20>
 376:	a9 5d       	subi	r26, 0xD9	; 217
 378:	a1 93       	st	Z+, r26
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	79 f7       	brne	.-34     	; 0x35c <__utoa_common+0x4>
 37e:	b1 11       	cpse	r27, r1
 380:	b1 93       	st	Z+, r27
 382:	11 92       	st	Z+, r1
 384:	cb 01       	movw	r24, r22
 386:	0c 94 c5 01 	jmp	0x38a	; 0x38a <strrev>

0000038a <strrev>:
 38a:	dc 01       	movw	r26, r24
 38c:	fc 01       	movw	r30, r24
 38e:	67 2f       	mov	r22, r23
 390:	71 91       	ld	r23, Z+
 392:	77 23       	and	r23, r23
 394:	e1 f7       	brne	.-8      	; 0x38e <strrev+0x4>
 396:	32 97       	sbiw	r30, 0x02	; 2
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <strrev+0x18>
 39a:	7c 91       	ld	r23, X
 39c:	6d 93       	st	X+, r22
 39e:	70 83       	st	Z, r23
 3a0:	62 91       	ld	r22, -Z
 3a2:	ae 17       	cp	r26, r30
 3a4:	bf 07       	cpc	r27, r31
 3a6:	c8 f3       	brcs	.-14     	; 0x39a <strrev+0x10>
 3a8:	08 95       	ret

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
